//Here after entering the details in the register.html page then I changed the webServlet from /register to /reg and then I gave the action as post
//so I am collecting all the details and using printwrite I am dispalying whatever I entered 

package com.telusko.learning;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


@WebServlet("/reg")//while creating the servlet we changed the url mapping from /registration to /reg. And I gave this ./reg in my servlet like once the user
//clicks on register then it should enter here
public class Registration extends HttpServlet { // if this class is extending HttpServlet it means it is a Servlet class not a normal class
	private static final long serialVersionUID = 1L;
       
    
    public Registration() {
       
    	System.out.println("servlet instatnited..");
    }

	
	public void init(ServletConfig config) throws ServletException {
		
		System.out.println("servlet initialized.");
	}

	
	public void destroy() {
		System.out.println("destroyed");
	}

	//There are two types of request : Get and Post based on the method I specify
	//In servlet I can use request and response provided by inbuilt ones to request and response the data
	//Generally to respond back to the client we will redirect from servlet to jsp page
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		String userName=request.getParameter("username");//Here we have to specify whatever present in name in register.html in input type
		
		String addr=request.getParameter("Address");
		
		String phone=request.getParameter("PhoneNumber");
		
		PrintWriter writer=response.getWriter();
		
		// To print the browser 
		
		
		writer.println("<html><head><title>Result</title></head>");
		writer.println("<body> ");
		writer.println("<table>");
		writer.println("<tr> <th> Name </th><th> Address </th> <th> Phone</th></tr>");
		writer.println("<tr> <td> "+userName+"</td><td>"+addr+"</td> <td>"+phone+"</td> </tr>");
		writer.println("</body>");
		writer.println("</html>");
		writer.close();
		
		
		
		
		//System.out.println(userName+" : "+addr);
	}

}

/*In your servlet code, the destroy method is part of the servlet life cycle, and it gets called when the servlet container decides to unload the servlet, typically during server shutdown. If you're not seeing the message from the destroy method, it's likely because the servlet container hasn't unloaded the servlet yet.

Servlet containers, like Tomcat, manage the lifecycle of servlets. The destroy method is called when the container decides to unload the servlet, and this might not happen immediately after you close the browser or finish processing a request. Servlet containers are responsible for managing the lifecycle of servlets, and the exact timing of when destroy gets called can vary.

Regarding the doGet method, in your current implementation, it doesn't perform any specific actions. It's generated by default when you extend HttpServlet. If you don't need to handle GET requests differently, you can leave it empty or remove it. In your case, since all the processing is done in the doPost method, you might not need the doGet method.

If you want to see the destroy method being called, you can try stopping the Tomcat server (or your servlet container) and observe the console output during the shutdown process. When the server is stopped, it unloads servlets and calls their destroy methods.

Remember, the servlet container manages the servlet lifecycle, and the exact behavior might vary between different containers. If you're using an integrated development environment (IDE) with Tomcat, consider stopping the server from the IDE, and you should see the destroy method being called.*/
