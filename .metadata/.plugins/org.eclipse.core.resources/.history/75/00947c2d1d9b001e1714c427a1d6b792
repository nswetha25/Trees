//Here lets take a funny example. Here it is not good use of multithreading because it goes in any random order. So we can lock method to work as the way we expect

class bathroom implements Runnable{
	public void run() {
		try {
			System.out.println(Thread.currentThread().getName()+ " has entered bathroom");
			Thread.sleep(5000);
			System.out.println(Thread.currentThread().getName()+ " has usng bathroom");
			Thread.sleep(3000);
			System.out.println(Thread.currentThread().getName()+ " has exited bathroom");
		}
		catch(Exception e) {
			System.out.println("Exception caching");
		}
		
	}
}
public class Mutli8 {

	public static void main(String[] args) {
		bathroom b=new bathroom();
		Thread t1=new Thread(b);
		Thread t2=new Thread(b); 
		Thread t3=new Thread(b);
		
		//Lets set the names
		
		t1.setName("boy");
		t2.setName("Girl");
		t3.setName("Infant");
		
		//start the threads and now it will be under the control of ThreadScheduler
		
		t1.start();
		t2.start();
		t3.start();
		

	}

}
